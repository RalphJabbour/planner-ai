version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - '3000:80'
    depends_on:
      - backend
    networks:
      - planner-network
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:8000/docs || exit 1']
      interval: 10s
      timeout: 5s
      retries: 12

  backend:
    build: ./backend
    ports: ["8000:8000"]
    env_file: ./backend/.env
    networks: [planner-network]
    healthcheck:
      # inside the container, curl localhost
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 10s
      timeout: 5s
      retries: 10

  course-sync:
    build: ./course-sync
    restart: always
    env_file: .env
    depends_on:
      db:
        condition: service_started       # DB just has to be up
      backend:
        condition: service_healthy       # âœ… wait until backend passes health-check
    networks: [planner-network]

  db:
    image: postgres:15
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    networks:
      - planner-network

networks:
  planner-network:
    driver: bridge

volumes:
  postgres_data:
    # Using default volume settings
